#!/usr/bin/env python
# encoding: utf-8

__author__ = 'Nikola Kovacevic <nikolak@outlook.com>'

import datetime
import argparse

import praw


SUBREDDIT_NAME = "learnpython"
USERNAME = "wub_wub"
PASSWORD = "*******"
USER_AGENT = "/r/learnpython css,sidebar,flair, updater script author: /u/wub_wub"

reddit = praw.Reddit(user_agent=USER_AGENT, decode_html_entities="yes")
reddit.login(USERNAME, PASSWORD)
subreddit = reddit.get_subreddit(SUBREDDIT_NAME)


def update_stylesheet():
    """
    Gets new stylesheet by combining contents of 'stylesheet.css' and
    'flairs_stylesheet.css' files.
    Stylesheet is then applied to subreddit named in SUBREDDIT_NAME var
    If succesfull nothing is returned otherwise error list or invalid
    css string is printed
    """

    full_stylesheet = "/* Generated by update.py on: {} */\n\n".format(
        datetime.datetime.now().isoformat())
    with open("stylesheet.css", "r") as main_stylesheeet:
        full_stylesheet += main_stylesheeet.read()
    with open("flairs_stylesheet.css", "r") as flair_stylesheet:
        full_stylesheet += flair_stylesheet.read()
    try:
        response = reddit.set_stylesheet(subreddit, full_stylesheet)
        if response['errors'] != []:
            print "Updating failed"
            print response['errors']
        else:
            print "Stylesheet updated"
    except praw.errors.BadCSS:
        print "Invalid CSS"
        print "Stylesheet update failed"


def update_sidebar():
    """
    Gets contents of sidebar from sidebar.txt file and uploads it as
    new siebar content to subreddit specified in SUBREDDIT_NAME var
    """
    with open("sidebar.txt", "r") as sidebar_file:
        new_sidebar_content = sidebar_file.read()
    try:
        response = reddit.update_settings(subreddit,
                                          description=new_sidebar_content)
        if response['errors'] != []:
            print "Reddit side error updating sidebar"

        else:
            print "Sidebar updated"
    except:
        print "Error updating sidebar"


def update_flair_mappings():
    flair_mapping = [{"text": "", "css_class": "py27bg"},
                     {"text": "", "css_class": "py2int"},
                     {"text": "", "css_class": "py27ad"},
                     {"text": "", "css_class": "py27ex"},
                     {"text": "Github username", "css_class": "py27bggh"},
                     {"text": "Github username", "css_class": "py2intgh"},
                     {"text": "Github username", "css_class": "py27adgh"},
                     {"text": "Github username", "css_class": "py27exgh"},
                     {"text": "", "css_class": "py32bg"},
                     {"text": "", "css_class": "py3int"},
                     {"text": "", "css_class": "py32ad"},
                     {"text": "", "css_class": "py32ex"},
                     {"text": "Github username", "css_class": "py32bggh"},
                     {"text": "Github username", "css_class": "py3intgh"},
                     {"text": "Github username", "css_class": "py32adgh"},
                     {"text": "Github username", "css_class": "py32exgh"},
                     {"text": "", "css_class": "py2-empty"},
                     {"text": "", "css_class": "py3-empty"},
                     {"text": "", "css_class": "github-empty"},
                     {"text": "Custom text", "css_class": ""},
    ]
    reddit.clear_flair_templates(subreddit)
    for flair in flair_mapping:
        reddit.add_flair_template(subreddit, text=flair['text'],
                                  css_class=flair['css_class'],
                                  text_editable=True)
        print "Added {} flair".format(flair['css_class'])


def update_images():
    if reddit.upload_image(subreddit, "flairs.png"):
        print "Flair image updated"
    else:
        print "Flair image update failed"


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Subreddit assets updater")

    parser.add_argument('-c', '--css', action='store_true',
                        help="Update CSS/Stylesheet from the coresponding files")

    parser.add_argument('-s', '--side', action='store_true',
                        help="Update sidebar from the sidebar.txt file")

    parser.add_argument('-f', '--flair', action='store_true',
                        help="Update flair mappings from .json file")

    parser.add_argument('-i', '--img', action='store_true',
                        help="Update stylesheet images")

    parser.add_argument('-all', action='store_true',
                        help="Update everything!")

    args = parser.parse_args()

    if args.css:
        update_stylesheet()

    if args.side:
        update_sidebar()

    if args.flair:
        update_flair_mappings()

    if args.img:
        update_images()

    if args.all:
        update_images()
        update_stylesheet()
        update_sidebar()
        update_flair_mappings()